---
alwaysApply: false
description: Guide méthodologique pour identifier systématiquement l'origine précise d'un bug via hypothèses, logs de débogage et analyse
---

# Règle Enquêteur : Identification Systématique des Bugs 🕵️

## Principe Fondamental : Fail-Fast Appliqué au Débogage

Cette règle implémente le principe "Fail-Fast" dans le contexte du débogage : **identifier rapidement et précisément l'origine du bug sans le masquer**. L'objectif n'est PAS de résoudre le bug, mais de le localiser avec une précision chirurgicale pour permettre une correction ciblée.

**Philosophie** : Un bug mal localisé est un bug qui reviendra. Mieux vaut échouer rapidement avec une origine claire qu'un contournement qui masque la cause racine.

---

## ⛔🚫❌ INTERDICTION ABSOLUE DE CORRECTION ❌🚫⛔

**RÈGLE CRITIQUE** : L'enquêteur doit UNIQUEMENT identifier l'origine du bug. **TOUTE tentative de correction interrompt immédiatement le cycle d'enquête.**

### Interdictions strictes :
- 🚫 **Ne jamais modifier le code** pour "tester une correction"
- 🚫 **Ne jamais proposer de solutions** dans le rapport final
- 🚫 **Ne jamais implémenter de fix** ou workaround
- ❌ **Arrêt immédiat** si l'agent commence à corriger au lieu d'enquêter

**Rappel constant** : Cette règle **IDENTIFIE**, ne corrige pas. Une fois l'origine claire, c'est à l'utilisateur ou à une autre règle de procéder à la correction.

## 🏗️ Architecture de Machine à États Modulaire

### Nouveau Système : Architecture Architect/

Cette règle a été **transformée en une architecture de machine à états modulaire** pour garantir un processus de débogage rigoureux et fiable. Le système monolithique précédent a été décomposé en **8 étapes interconnectées** dans le dossier `.cursor/rules/architect/`.

### Pourquoi cette Architecture ?

**Problèmes du système précédent** :
- L'agent avait tendance à oublier où il en était
- Risque d'abandon prématuré du processus
- Tentatives de modification de code pendant l'enquête
- Manque de rigueur dans la validation des résultats

**Solutions apportées** :
- ✅ **Machine à états stricte** : chaque étape est autonome et obligatoire
- ✅ **Transitions explicites** : l'agent doit invoquer la règle suivante avec `fetch_rules`
- ✅ **Validation critique externe** : étape 04b-routing avec agent externe et critique
- ✅ **Reminder standardisé** : rappel constant des règles dans chaque étape

## 🔄 Processus Méthodologique en 8 Étapes

### Vue d'Ensemble du Système à États

```
00-start (point d'entrée)
  ↓
01a-explore       # Exploration des fichiers de code
  ↓
01b-hypotheses    # Formulation d'hypothèses précises
  ↓
02-logs           # Placement de logs de débogage
  ↓
03-execute        # Exécution et récupération des logs
  ↓
04-analyze        # Analyse des résultats
  ↓
04b-routing       # Validation critique externe - Agent neutre et critique
  ↓ (conditions multiples)
  ├→ 01a-explore (si exploration insuffisante)
  ├→ 01b-hypotheses (si hypothèses incorrectes)
  ├→ 02-logs (si logs insuffisants ou fonction locale)
  └→ 05-report (si validation complète)
```

### Caractéristiques Clés de l'Architecture

#### 1. **Machine à États Stricte**
- **INTERDICTION ABSOLUE** de mélanger ou sauter des étapes
- **OBLIGATION** de marquer explicitement le titre de l'étape actuelle
- **Chaque étape** a un objectif précis et ne peut pas être contournée

#### 2. **Transitions Explicites**
- L'agent DOIT invoquer la règle suivante avec `fetch_rules`
- Chaque règle indique clairement quelle règle invoquer ensuite
- La règle 04b-routing offre 4 chemins possibles selon les résultats

#### 3. **Validation Critique Externe (04b-routing)**
- **Agent externe et critique** qui analyse le travail de l'agent précédent
- **Méfiance systématique** face aux tentatives d'arrêt prématuré
- **Résistance à la pression** pour éviter les généralisations vagues
- **Score de profondeur** (0-10) pour évaluer la qualité du diagnostic

#### 4. **Reminder Standardisé**
- Chaque règle (01a à 05) commence par un rappel identique
- Interdictions absolues répétées dans chaque étape
- Machine à états clairement affichée

## 🎯 Comment Utiliser cette Architecture

### Activation du Système

**Pour démarrer une enquête de bug** :

1. **Invoquer cette règle** : `fetch_rules` avec `enqueteur`
2. **Contextualiser** : Fournir la description du bug et les conditions de reproduction
3. **Démarrer la machine à états** : Invoquer `fetch_rules` avec `00-start`
4. **Suivre le processus** : L'agent suivra automatiquement les 8 étapes dans l'ordre

### Exemple d'Activation

```
Utilisateur : "Utilise la règle enquêteur pour identifier l'origine de ce bug : 
le système retourne une erreur 500 quand j'essaie de me connecter"

Agent : [Invoque cette règle, puis] 
→ Invoque `fetch_rules` avec `00-start`
→ Suit automatiquement : 01a-explore → 01b-hypotheses → 02-logs → 03-execute → 04-analyze → 04b-routing
→ [Selon la décision critique] → 05-report OU retour vers une étape précédente
```

## 📁 Structure des Fichiers Architect/

```
.cursor/rules/architect/
├── 00-start.mdc          # Point d'entrée : explique le système à états
├── 01a-explore.mdc       # Exploration des fichiers de code
├── 01b-hypotheses.mdc    # Formulation d'hypothèses précises
├── 02-logs.mdc           # Placement de logs de débogage
├── 03-execute.mdc        # Exécution et récupération des logs
├── 04-analyze.mdc        # Analyse des résultats
├── 04b-routing.mdc       # Validation critique externe
└── 05-report.mdc         # Rapport final
```

## ⚠️ Règles de la Machine à États

### Règles de fonctionnement obligatoires :
- ✅ **UNIQUEMENT** effectuer les actions décrites dans la règle actuelle
- ❌ **INTERDICTION ABSOLUE** de faire autre chose (même si ça semble utile)
- ❌ **INTERDICTION ABSOLUE** de modifier le code pour corriger (uniquement identifier)
- ✅ **OBLIGATION** d'invoquer la règle suivante en fin d'étape avec l'outil `fetch_rules`

### Indication Obligatoire de l'Étape

L'agent DOIT **toujours** indiquer son étape actuelle avec des titres markdown explicites :
- `## Étape 01a : Exploration des fichiers de code`
- `## Étape 01b : Formulation d'hypothèses`
- `## Étape 02 : Placement de logs de débogage`
- `## Étape 03 : Exécution et récupération des logs`
- `## Étape 04 : Analyse des résultats`
- `## Étape 04b : Validation critique externe`
- `## Étape 05 : Rapport final`

**Règle de Machine à État** : Lors des retours/redirections, l'agent DOIT marquer le titre correspondant pour indiquer clairement qu'il change d'état.

## 🚀 Activation Immédiate

**Pour commencer l'enquête, invoquez immédiatement la première règle de la machine à états :**

**Prochaine étape** : Invoquer la règle `00-start` avec l'outil `fetch_rules` pour démarrer le processus d'enquête en 8 étapes.

---

## Transitions Possibles

**Toujours vers** : `00-start` - Point d'entrée de la machine à états d'enquête

**Action requise** : Une fois cette règle invoquée et le contexte du bug fourni, invoquer `fetch_rules` avec le nom `00-start` pour commencer le processus d'enquête systématique.
---
alwaysApply: false
description: Exploration syst√©matique des fichiers de code impliqu√©s dans le bug
---

# √âtape 1a : Exploration des Fichiers de Code üîç

## ‚ö†Ô∏è SYST√àME √Ä √âTATS - RAPPEL OBLIGATOIRE

Vous √™tes actuellement dans une **machine √† √©tats stricte** pour l'identification de bugs :

### R√®gles de fonctionnement
- ‚úÖ **UNIQUEMENT** effectuer les actions d√©crites dans cette r√®gle
- ‚ùå **INTERDICTION ABSOLUE** de faire autre chose (m√™me si √ßa semble utile)
- ‚ùå **INTERDICTION ABSOLUE** de modifier le code pour corriger (uniquement identifier)
- ‚úÖ **OBLIGATION** d'invoquer la r√®gle suivante en fin d'√©tape avec l'outil `fetch_rules`

### Machine √† √©tats
Cette √©tape fait partie d'un processus en 8 √©tapes :
`start ‚Üí 01a-explore ‚Üí 01b-hypotheses ‚Üí 02-logs ‚Üí 03-execute ‚Üí 04-analyze ‚Üí 04b-routing ‚Üí 05-report`

**Votre √©tape actuelle** : 01a-explore - Exploration des fichiers de code

---

## Objectif de l'√âtape 1a

**Identifier tous les fichiers impliqu√©s et comprendre le flux d'ex√©cution complet** du bug √† investiguer.

### Actions Obligatoires √† Effectuer

1. **Cartographier les fichiers** via les outils appropri√©s :
   - Utiliser `codebase_search` pour identifier les zones li√©es au bug
   - Utiliser `read_file` pour examiner les fichiers critiques identifi√©s
   - Utiliser `grep` pour rechercher des patterns sp√©cifiques

2. **Analyser le parcours d'ex√©cution** :
   - Tracer le flux depuis le point d'entr√©e jusqu'au point de d√©faillance
   - Identifier les fonctions appel√©es et leur ordre
   - Comprendre les conditions et branches prises

3. **Identifier les d√©pendances** :
   - Variables utilis√©es et leur source
   - Fonctions appel√©es et leur d√©finition
   - Services externes ou bases de donn√©es impliqu√©es

4. **Localiser les points critiques** :
   - Conditions de validation
   - Transformations de donn√©es
   - Points de branchement logique

### Sortie Attendue

√Ä la fin de cette √©tape, vous devez fournir :
- **Liste des fichiers** impliqu√©s dans le bug (avec chemins)
- **Flux d'ex√©cution** : s√©quence des appels de fonctions
- **Points de d√©faillance potentiels** : localisation des zones suspectes

### Exemple de Sortie

```
Fichiers identifi√©s :
- src/main.py (ligne 25-45)
- src/utils/auth.py (fonction validate_token)
- src/models/user.py (fonction get_user)

Flux d'ex√©cution :
main.py:25 ‚Üí auth.py:validate_token ‚Üí models.py:get_user ‚Üí main.py:40

Points critiques identifi√©s :
- Ligne 32 : v√©rification token (condition suspecte)
- Ligne 35 : extraction user_id (transformation de donn√©es)
```

---

## Transitions Possibles

**Toujours vers** : `01b-hypotheses` - Formulation d'hypoth√®ses pr√©cises sur l'origine du bug

**Action requise** : Une fois l'exploration termin√©e et document√©e, invoquer `fetch_rules` avec le nom `01b-hypotheses` pour passer √† la formulation d'hypoth√®ses.
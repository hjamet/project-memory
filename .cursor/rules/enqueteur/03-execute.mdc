---
alwaysApply: false
description: Ex√©cution du programme et r√©cup√©ration de tous les logs dans les conditions du bug
---

# √âtape 3 : Ex√©cution et R√©cup√©ration des Logs üöÄ

## ‚ö†Ô∏è SYST√àME √Ä √âTATS - RAPPEL OBLIGATOIRE

Vous √™tes actuellement dans une **machine √† √©tats stricte** pour l'identification de bugs :

### R√®gles de fonctionnement
- ‚úÖ **UNIQUEMENT** effectuer les actions d√©crites dans cette r√®gle
- ‚ùå **INTERDICTION ABSOLUE** de faire autre chose (m√™me si √ßa semble utile)
- ‚ùå **INTERDICTION ABSOLUE** de modifier le code pour corriger (uniquement identifier)
- ‚úÖ **OBLIGATION** d'invoquer la r√®gle suivante en fin d'√©tape avec l'outil `fetch_rules`

### Machine √† √©tats
Cette √©tape fait partie d'un processus en 8 √©tapes :
`start ‚Üí 01a-explore ‚Üí 01b-hypotheses ‚Üí 02-logs ‚Üí 03-execute ‚Üí 04-analyze ‚Üí 04b-routing ‚Üí 05-report`

**Votre √©tape actuelle** : 03-execute - Ex√©cution et r√©cup√©ration des logs

---

## Objectif de l'√âtape 3

**Lancer le programme et r√©cup√©rer tous les logs** dans les conditions exactes du bug pour analyser les donn√©es de d√©bogage plac√©es en √©tape 2.

### M√©thodes d'Ex√©cution

### 1. Ex√©cution Directe
Lancer le programme principal directement :
```bash
python main.py
# ou
npm start
# ou
./run.sh
```

### 2. Script Temporaire (Recommand√©)
Si n√©cessaire, cr√©er un script temporaire √† la racine pour isoler le probl√®me :
```python
# debug_scenario.py
# Code minimal pour reproduire le bug avec les logs plac√©s
[code du sc√©nario probl√©matique]
```

### Actions Obligatoires

1. **Reproduire les conditions exactes du bug** :
   - Utiliser les m√™mes param√®tres d'entr√©e
   - Reproduire le m√™me environnement (variables d'env, etc.)
   - Suivre la m√™me s√©quence d'actions

2. **Capturer TOUT l'output** :
   - **stdout** : tous les logs de d√©bogage plac√©s
   - **stderr** : erreurs et exceptions
   - **Code de sortie** : v√©rifier si le programme s'est arr√™t√© avec `exit(1)`

3. **Pr√©server l'ordre chronologique** :
   - Les logs doivent appara√Ætre dans l'ordre d'ex√©cution
   - Ne pas m√©langer stdout et stderr
   - Documenter le timestamp si possible

### Format de R√©cup√©ration

R√©cup√©rer et pr√©senter les logs dans ce format :

```
=== EX√âCUTION ET LOGS DE D√âBOGAGE ===

Commande ex√©cut√©e : [commande exacte]

STDOUT :
{BEFORE_line_23: "true", token: "...", payload_exists: "True", state: "CHECKING_TOKEN"}
{AFTER_line_23: "true", user_id: "None", user_id_is_none: "True", state: "ANOMALIE_NONE_USER_ID"}

STDERR :
[any error messages]

Code de sortie : 1 (attendu √† cause d'exit(1))

Conditions reproduites :
- Variables d'environnement : [list]
- Arguments : [list]
- √âtat initial : [description]
```

### Cas Sp√©ciaux √† G√©rer

### 1. Programme qui ne s'arr√™te pas
Si le programme ne s'arr√™te pas automatiquement avec `exit(1)`, vous devez :
- L'arr√™ter manuellement apr√®s avoir r√©cup√©r√© les logs n√©cessaires
- Documenter cette situation

### 2. Logs manquants
Si certains logs attendus n'apparaissent pas :
- V√©rifier que le code n'a pas √©t√© modifi√©
- V√©rifier que la s√©quence d'ex√©cution m√®ne bien aux lignes avec logs
- Documenter les logs manquants

### 3. Erreurs d'ex√©cution
Si le programme plante avant d'atteindre les logs :
- Capturer l'erreur dans stderr
- Documenter o√π l'ex√©cution s'est arr√™t√©e
- Conserver cette information pour l'analyse

### Sortie Attendue

√Ä la fin de cette √©tape, vous devez avoir :
- **Commande exacte** utilis√©e pour reproduire le bug
- **Logs complets** de d√©bogage (stdout et stderr)
- **Code de sortie** et conditions d'arr√™t
- **Documentation** des conditions de reproduction exactes

---

## Transitions Possibles

**Toujours vers** : `04-analyze` - Analyse des logs pour identifier les patterns et sympt√¥mes

**Action requise** : Une fois tous les logs r√©cup√©r√©s et document√©s, invoquer `fetch_rules` avec le nom `04-analyze` pour passer √† l'analyse des r√©sultats.
---
alwaysApply: false
description: Placement de logs de d√©bogage avant/apr√®s pour identifier la ligne exacte du bug
---

# √âtape 2 : Placement de Logs de D√©bogage üìù

## ‚ö†Ô∏è SYST√àME √Ä √âTATS - RAPPEL OBLIGATOIRE

Vous √™tes actuellement dans une **machine √† √©tats stricte** pour l'identification de bugs :

### R√®gles de fonctionnement
- ‚úÖ **UNIQUEMENT** effectuer les actions d√©crites dans cette r√®gle
- ‚ùå **INTERDICTION ABSOLUE** de faire autre chose (m√™me si √ßa semble utile)
- ‚ùå **INTERDICTION ABSOLUE** de modifier le code pour corriger (uniquement identifier)
- ‚úÖ **OBLIGATION** d'invoquer la r√®gle suivante en fin d'√©tape avec l'outil `fetch_rules`

### Machine √† √©tats
Cette √©tape fait partie d'un processus en 8 √©tapes :
`start ‚Üí 01a-explore ‚Üí 01b-hypotheses ‚Üí 02-logs ‚Üí 03-execute ‚Üí 04-analyze ‚Üí 04b-routing ‚Üí 05-report`

**Votre √©tape actuelle** : 02-logs - Placement de logs de d√©bogage

---

## Objectif de l'√âtape 2

**Ins√©rer des logs "avant/apr√®s"** pour identifier la ligne exacte du bug selon les hypoth√®ses formul√©es en √©tape 1b.

### ‚ö†Ô∏è R√àGLES CRITIQUES POUR LES LOGS

### 1. Format Dictionnaire Obligatoire
Tous les logs doivent utiliser le format : `{"cl√©": str(valeur)[:limite]}`

### 2. Limitation de Caract√®res
- Maximum 50-100 caract√®res pour les valeurs simples
- Maximum 100-500 caract√®res selon l'importance de la variable
- Toujours tronquer avec `[:limit]` pour √©viter les logs trop longs

### 3. Exit Apr√®s Boucles
Protection obligatoire contre les boucles infinies en ajoutant `exit(1)` apr√®s chaque s√©rie de logs dans une boucle.

### 4. Logs "Sandwich"
Log AVANT et APR√àS la ligne suspecte pour capturer l'√©tat exact.

### Format Standard des Logs

```python
# Log AVANT - tout doit √™tre normal
print({
    "BEFORE_line_47": "true",
    "a": str(a)[:50],
    "b": str(b)[:50],
    "state": "NORMAL"
})

# Ligne suspecte 47
result = a - b  # BUG ICI : devrait √™tre a + b

# Log APR√àS - probl√®me visible ici
print({
    "AFTER_line_47": "true", 
    "result": str(result)[:50],
    "expected": str(a + b)[:50],
    "state": "ANOMALIE_DETECTED" if result != (a + b) else "NORMAL"
})
exit(1)  # Arr√™t obligatoire pour analyse
```

### Actions Obligatoires

1. **Pour chaque hypoth√®se de l'√©tape 1b** :
   - Identifier la ligne exacte mentionn√©e dans l'hypoth√®se
   - Placer un log AVANT cette ligne (√©tat normal attendu)
   - Placer un log APR√àS cette ligne (√©tat apr√®s ex√©cution suspecte)

2. **Utiliser des identifiants clairs** :
   - `"BEFORE_line_X": "true"` pour le log avant
   - `"AFTER_line_X": "true"` pour le log apr√®s
   - Inclure les variables pertinentes avec leurs valeurs

3. **Ajouter l'arr√™t obligatoire** :
   - `exit(1)` apr√®s chaque s√©rie de logs pour forcer l'analyse
   - Cela √©vite que l'ex√©cution continue et masque le probl√®me

### Exemples de Logs Sp√©cifiques

#### Pour une hypoth√®se sur une variable None :
```python
# Log AVANT ligne 23
print({
    "BEFORE_line_23": "true",
    "token": str(token)[:100],
    "payload_exists": str(payload is not None),
    "state": "CHECKING_TOKEN"
})

user_id = extract_user_id_from_token(token)  # ligne 23 suspecte

# Log APR√àS ligne 23
print({
    "AFTER_line_23": "true",
    "user_id": str(user_id)[:50],
    "user_id_is_none": str(user_id is None),
    "state": "ANOMALIE_NONE_USER_ID" if user_id is None else "NORMAL"
})
exit(1)
```

#### Pour une hypoth√®se sur une exception :
```python
# Log AVANT ligne 45
print({
    "BEFORE_line_45": "true",
    "user_id": str(user_id)[:50],
    "db_connected": str(db.is_connected()),
    "state": "ATTEMPTING_USER_FETCH"
})

user = db.get_user(user_id)  # ligne 45 suspecte

# Log APR√àS ligne 45
print({
    "AFTER_line_45": "true",
    "user": str(user)[:100],
    "user_exists": str(user is not None),
    "state": "USER_FETCH_COMPLETE"
})
exit(1)
```

### Sortie Attendue

Documenter les modifications apport√©es :
```
Logs plac√©s pour tester les hypoth√®ses :

Hypoth√®se 1 : Logs ajout√©s dans src/auth.py lignes 22-24 et 26-28
Hypoth√®se 2 : Logs ajout√©s dans src/db.py lignes 44-46 et 48-50
Hypoth√®se 3 : Logs ajout√©s dans src/utils.py lignes 11-13 et 15-17
```

---

## Transitions Possibles

**Toujours vers** : `03-execute` - Ex√©cution du programme et r√©cup√©ration des logs

**Action requise** : Une fois tous les logs plac√©s selon les hypoth√®ses, invoquer `fetch_rules` avec le nom `03-execute` pour passer √† l'ex√©cution et r√©cup√©ration des logs.